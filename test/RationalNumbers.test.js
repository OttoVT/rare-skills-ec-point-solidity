const { constants } = require('@openzeppelin/test-helpers');
const { expect } = require('chai');
const { BigNumber } = require('ethers');

const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
const MAX_UINT256 = BigNumber.from('115792089237316195423570985008687907853269984665640564039457584007913129639935');

describe('RationalNumbers', function () {
    var initialHolder;
    var recipient;
    var anotherAccount;
    var token;

    beforeEach(async function () {
        [initialHolder, recipient, anotherAccount] = await ethers.getSigners();
        const RationalNumbers = await ethers.getContractFactory("RationalNumbers");
        token = await RationalNumbers.deploy();
    });

    describe('Call rationalAdd', function () {

        // 8 / 12 + 1 / 12 = 9 / 12 (3/4)
        it('works correctly for positive case', async function () {
            var A = {
                x: BigNumber.from('4044475655963335105874705693887717986734082637953872334734275921521622691675'),
                y: BigNumber.from('6961300548333041600164002436990239666696562973977691579804530869930595532137')
            };
            var B = {
                x: BigNumber.from('15514098174231388526936394909884819852161713760351236454286095935185347406190'),
                y: BigNumber.from('16207293035697985973521572619574413772437159530764812837532719998459133339912')
            };
            var nom = 3;
            var denom = 4;
            expect(await token.rationalAdd(A, B, nom, denom)).to.be.true;
        });

        // 9/12 + 1/12 != 9/12 (3/4)
        it('works correctly for negative case', async function () {
            var A = {
                x: BigNumber.from('2857625431839718922471812833357737477490018756027287331750692909542658596388'),
                y: BigNumber.from('1911129795864509240059974873783816568594673160967429852131769465429209708149')
            };
            var B = {
                x: BigNumber.from('15514098174231388526936394909884819852161713760351236454286095935185347406190'),
                y: BigNumber.from('16207293035697985973521572619574413772437159530764812837532719998459133339912')
            };
            var nom = 3;
            var denom = 4;
            expect(await token.rationalAdd(A, B, nom, denom)).to.be.false;
        });
    });

    describe('Call mmatMul', function () {

        /*
            P (17108685722251241369314020928988529881027530433467445791267465866135602972753, 20666112440056908034039013737427066139426903072479162670940363761207457724060)
            Q (20453939078259811958859768391452073654460321168773748684493785442363495374770, 9582859829925552874957318860636821932456214701004608986274201852321144884827)
            R (12109125168208163605857260910923713983580584394895257282529162242928595286368, 15968495061591974818369503561669603416490648399745553243439919872679665689139)

            R1 (9358821320411475700000254387098246091616152844881386078431208822494995307800, 5960839627144408124524040494365538587744524225997207327386457628187898526810)
            R2 (17747920359253913546551417160303297937542312574889904290131615776238588901697, 8815119438581789680513912776342567599606944899217792926373871775002956510503)
            R3 (4721275587955687637148377202262741060693761623977928613392944678510495108266, 2642965900986443192374151435528317410538902576886678180169320050919603747299)
        */
        // 8 / 12 + 1 / 12 = 9 / 12 (3/4)
        it('works correctly for positive case', async function () {
            var P = {
                x: BigNumber.from('17108685722251241369314020928988529881027530433467445791267465866135602972753'),
                y: BigNumber.from('20666112440056908034039013737427066139426903072479162670940363761207457724060')
            };
            var Q = {
                x: BigNumber.from('20453939078259811958859768391452073654460321168773748684493785442363495374770'),
                y: BigNumber.from('9582859829925552874957318860636821932456214701004608986274201852321144884827')
            };
            var R = {
                x: BigNumber.from('12109125168208163605857260910923713983580584394895257282529162242928595286368'),
                y: BigNumber.from('15968495061591974818369503561669603416490648399745553243439919872679665689139')
            };

            var R1 = {
                x: BigNumber.from('9358821320411475700000254387098246091616152844881386078431208822494995307800'),
                y: BigNumber.from('5960839627144408124524040494365538587744524225997207327386457628187898526810')
            };

            var R2 = {
                x: BigNumber.from('17747920359253913546551417160303297937542312574889904290131615776238588901697'),
                y: BigNumber.from('8815119438581789680513912776342567599606944899217792926373871775002956510503')
            };

            var R3 = {
                x: BigNumber.from('4721275587955687637148377202262741060693761623977928613392944678510495108266'),
                y: BigNumber.from('2642965900986443192374151435528317410538902576886678180169320050919603747299')
            };

            var matrix = [1,2,3,4,5,6,7,8,9];
            var n = 3;
            var s = [P, Q, R];
            var o = [R1,R2,R3];

            expect(await token.matMul(matrix, n, s, o)).to.be.true;
        });

        // Q (20765039372871530718554589730410158162413780974122112544611863764810626751360, 2444183914824638066910831265243126275246160293098948571390980460351548298384)
        it('works correctly for negative case', async function () {
            var P = {
                x: BigNumber.from('17108685722251241369314020928988529881027530433467445791267465866135602972753'),
                y: BigNumber.from('20666112440056908034039013737427066139426903072479162670940363761207457724060')
            };
            var Q = {
                x: BigNumber.from('20765039372871530718554589730410158162413780974122112544611863764810626751360'),
                y: BigNumber.from('2444183914824638066910831265243126275246160293098948571390980460351548298384')
            };
            var R = {
                x: BigNumber.from('12109125168208163605857260910923713983580584394895257282529162242928595286368'),
                y: BigNumber.from('15968495061591974818369503561669603416490648399745553243439919872679665689139')
            };

            var R1 = {
                x: BigNumber.from('9358821320411475700000254387098246091616152844881386078431208822494995307800'),
                y: BigNumber.from('5960839627144408124524040494365538587744524225997207327386457628187898526810')
            };

            var R2 = {
                x: BigNumber.from('17747920359253913546551417160303297937542312574889904290131615776238588901697'),
                y: BigNumber.from('8815119438581789680513912776342567599606944899217792926373871775002956510503')
            };

            var R3 = {
                x: BigNumber.from('4721275587955687637148377202262741060693761623977928613392944678510495108266'),
                y: BigNumber.from('2642965900986443192374151435528317410538902576886678180169320050919603747299')
            };

            var matrix = [1,2,3,4,5,6,7,8,9];
            var n = 3;
            var s = [P, Q, R];
            var o = [R1,R2,R3];

            expect(await token.matMul(matrix, n, s, o)).to.be.false; 
        });
    });
});
